@{
    var message = ViewBag.Message;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var quantity = 1;

    var product = ViewBag.Product;
    var ratingDict = product.Rating as Dictionary<string, int> ?? new Dictionary<string, int>();
    var starCounts = new[] {
        ratingDict.ContainsKey("rate_5") ? ratingDict["rate_5"] : 0,
        ratingDict.ContainsKey("rate_4") ? ratingDict["rate_4"] : 0,
        ratingDict.ContainsKey("rate_3") ? ratingDict["rate_3"] : 0,
        ratingDict.ContainsKey("rate_2") ? ratingDict["rate_2"] : 0,
        ratingDict.ContainsKey("rate_1") ? ratingDict["rate_1"] : 0
    };
    var total = starCounts.Sum();
    string[] starLabels = { "5 Sao", "4 Sao", "3 Sao", "2 Sao", "1 Sao" };


    int totalVotes = 0;
    int weightedSum = 0;

    for (int i = 1; i <= 5; i++)
    {
        int count = ratingDict.ContainsKey($"rate_{i}") ? ratingDict[$"rate_{i}"] : 0;
        totalVotes += count;
        weightedSum += count * i;
    }

    double average = totalVotes > 0 ? Math.Round((double)weightedSum / totalVotes, 1) : 0;
    int fullStars = (int)Math.Floor(average);
    bool hasHalfStar = average - fullStars >= 0.5;
    int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);


    var availableStock = 0;
    if (product != null && product.Detail != null && product.Detail.ContainsKey("Kho") && product.Detail["Kho"] != null)
    {
        string khoString = product.Detail["Kho"].ToString();
        int.TryParse(khoString, out availableStock);
    }

    // // Test review
   
    List<Review> review = ViewBag.Reviews;
    int countWithComment = review.Count(r => !string.IsNullOrWhiteSpace(r.Comment));
    int countWithMedia = review.Count(r => r.MediaURLs != null && r.MediaURLs.Any());

    int GetStarCount(int star) => ratingDict.ContainsKey($"rate_{star}") ? ratingDict[$"rate_{star}"] : 0;
}

<style>
    .product-detail {
        background-color: white;
        padding-top: 20px;
    }

    .product-container {
        background-color: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .carousel-item {
        height: 400px;
        background-color: #f8f9fa;
    }

    .image-wrapper {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .image-wrapper img {
            max-height: 100%;
            max-width: 100%;
            object-fit: cover;
        }

    .btn-outline-purple {
        color: #6f42c1;
        border: 2px solid #6f42c1;
        background-color: transparent;
        font-weight: 500;
    }

        .btn-outline-purple:hover {
            background-color: #6f42c1;
            color: #fff;
        }

    .btn-purple {
        background-color: #6f42c1;
        color: white;
        border: none;
        font-weight: 500;
    }

        .btn-purple:hover {
            background-color: #5a32a3;
            color: white;
        }

    .btn i {
        margin-right: 6px;
    }

    .thumbnail-scroll {
        scrollbar-width: thin;
        scrollbar-color: #ccc transparent;
    }

        .thumbnail-scroll::-webkit-scrollbar {
            height: 6px;
        }

        .thumbnail-scroll::-webkit-scrollbar-thumb {
            background-color: #ccc;
            border-radius: 10px;
        }

    .btn-outline-dark.active {
        background-color: #6f42c1;
        color: white;
        border-color: #6f42c1;
    }
    /* Remove arrows for all browsers */
    input.quantity-input::-webkit-outer-spin-button,
    input.quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input.quantity-input {
        -moz-appearance: textfield;
        width: 60px; /* make it broader */
    }

    .star-rating-input {
        font-size: 24px;
        color: #ddd;
    }
    
    .star-selectable {
        cursor: pointer;
        transition: color 0.2s;
    }
    
    .star-selectable:hover,
    .star-selectable.active {
        color: #ffc107;
    }
    
    #imagePreview img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 4px;
    }

    .progress {
        background-color: #f0f0f0;
        border-radius: 4px;
    }

    .btn-outline-secondary {
        border-color: #e0e0e0;
        color: #666;
    }

    .btn-outline-secondary:hover {
        background-color: #f8f9fa;
        border-color: #666;
        color: #333;
    }

    .btn-outline-secondary.active {
        background-color: #6f42c1;
        color: white;
        border-color: #6f42c1;
    }

    .review-item {
        transition: all 0.3s ease;
    }
</style>

<div class="product-detail">
    <div class="container product-container">
        <div class="row">
            <!-- Hình ảnh sản phẩm -->
            <div class="col-md-6">
                <div id="carouselImages" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        @for (int i = 0; i < @product.ImageURL.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <div class="image-wrapper">
                                    <img src="@product.ImageURL[i]" class="img-fluid" alt="Image @(i + 1)">
                                </div>
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselImages" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon"></span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselImages" data-bs-slide="next">
                        <span class="carousel-control-next-icon"></span>
                    </button>
                </div>
                <!-- Toàn bộ ảnh dưới hình ảnh sản phẩm -->
                <div class="mt-3 position-relative">
                    <div class="thumbnail-scroll d-flex overflow-auto gap-2 px-5" style="scroll-snap-type: x mandatory;">
                        @for (int i = 0; i < @product.ImageURL.Count; i++)
                        {
                            <img src="@product.ImageURL[i]"
                                 class="img-thumbnail"
                                 data-bs-target="#carouselImages"
                                 data-bs-slide-to="@i"
                                 style="width: 80px; height: 80px; object-fit: cover; cursor: pointer; scroll-snap-align: start;" />
                        }
                    </div>
                </div>
            </div>

            <!-- Thông tin sản phẩm -->
            <div class="col-md-6">
                <h3 class="fw-bold">@product.Name</h3>
                <p class="text-muted">@product.Description</p>
                <h4 class="text-danger fw-bold">₫@product.Price.ToString("N0")</h4>
                <p><strong>Kho còn:</strong> @product.Detail["Kho"]</p>
                <p><strong>Gửi từ:</strong> @product.Detail["Gửi từ"]</p>
                <p><strong>Tình trạng:</strong>@product.Detail["Tình trạng"]</p>
                @if (@product.Color != null && @product.Color.Count > 0)
                {
                    <p>
                        <strong>Màu sắc:</strong>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var color in @product.Color)
                            {
                                <button class="btn btn-outline-dark color-select" onclick="selectColor(this, '@color')">@color</button>
                            }
                        </div>
                    </p>
                }

                <!--Choosing quantity-->
                <div class="d-flex align-items-center mt-3">
                    <label class="me-3 fw-semibold" style="color: #555;">Số Lượng</label>

                    <div class="input-group quantity-group" style="width: 160px;">
                        <button class="btn btn-outline-secondary btn-sm quantity-decrease" type="button">−</button>
                        <input type="text" id="quantityInput" class="form-control text-center quantity-input" value="@quantity" />
                        <button class="btn btn-outline-secondary btn-sm quantity-increase" type="button">+</button>
                    </div>
                    <span class="ms-3 text-muted">@availableStock sản phẩm có sẵn</span>
                </div>




                
                

                <button type="button"
                        class="btn btn-outline-purple"
                        data-product-id="@product.ProductId"
                        data-product-name="@product.Name"
                        data-image-url="@product.ImageURL[0]"
                        data-price="@product.Price"
                        onclick="addToCart(this)">
                    <i class="bi bi-cart-plus"></i> Thêm vào giỏ hàng
                </button>

                    <button type="button" class="btn btn-purple" onclick="buyNow()">
                        Mua ngay
                    </button>
                </div>
            </div>
        <form id="paymentForm" method="post" action="/Payment/BuyItems">
            <input type="hidden" name="selectedItems" id="selectedItemsJson" />
        </form>

            <!-- Chính sách sản phẩm -->
            <div class="container mt-4">
                <h5 class="fw-bold mb-3">Chính sách sản phẩm</h5>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="border rounded p-3 h-100">
                            <h6><i class="bi bi-shield-check text-success"></i> Bảo hành</h6>
                            <p>Bảo hành chính hãng 24 tháng.</p>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="border rounded p-3 h-100">
                            <h6><i class="bi bi-arrow-repeat text-primary"></i> Trả hàng dễ dàng</h6>
                            <p>Trả hàng miễn phí trong vòng 7 ngày</p>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="border rounded p-3 h-100">
                            <h6><i class="bi bi-truck text-warning"></i> Miễn phí giao hàng toàn quốc</h6>
                            <p> Đơn hàng đặt sau 13h thứ 6 sẽ được giao vào tuần sau.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Chi tiết kỹ thuật -->
    <div class="container product-container">
        <div class="row">
            <div class="col-12">
                <h5 class="fw-bold mb-3">Thông số kỹ thuật</h5>
                <table class="table table-bordered">
                    <tbody>
                        @foreach (var spec in @product.Detail)
                        {
                            <tr>
                                <th>@spec.Key</th>
                                <td>@spec.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    let selectedColor = '';

    function selectColor(button, color) {
        // Remove active class from all color buttons
        document.querySelectorAll('.color-select').forEach(btn => {
            btn.classList.remove('active');
        });

        // Add active class to clicked button
        button.classList.add('active');
        selectedColor = color;
    }

    function buyNow() {
        const selectedItems = [];

        const quantity = parseInt(document.getElementById("quantityInput").value);

        const addToCartButton = document.querySelector("button[data-product-id]"); // assumes it's the only one on page

        const item = {
            productId: addToCartButton.dataset.productId,
            productName: addToCartButton.dataset.productName,
            image: addToCartButton.dataset.imageUrl,
            quantity: quantity,
            unitPrice: parseInt(addToCartButton.dataset.price)
        };

        selectedItems.push(item);

        // Inject JSON string into hidden input
        document.getElementById("selectedItemsJson").value = JSON.stringify(selectedItems);

        // Submit form
        document.getElementById("paymentForm").submit();
    }





       document.addEventListener('DOMContentLoaded', function () {
           const input = document.querySelector('.quantity-input');
           const increaseBtn = document.querySelector('.quantity-increase');
           const decreaseBtn = document.querySelector('.quantity-decrease');
           const max = @availableStock;
           const min = 1;

           increaseBtn.addEventListener('click', () => {
               let current = parseInt(input.value) || min;
               if (current < max)
               {
                   input.value = current + 1;
                   document.getElementById("quantityInput").value = input.value;
               }
           });

           decreaseBtn.addEventListener('click', () => {
               let current = parseInt(input.value) || min;
               if (current > min)
               {
                   input.value = current - 1;
                   document.getElementById("quantityInput").value = input.value;
               }

           });

           input.addEventListener('input', () => {
               let val = parseInt(input.value);
               if (isNaN(val) || val < min) input.value = min;
               else if (val > max)
               {
                   input.value = max;
                   document.getElementById("quantityInput").value = input.value;
               }

           });

           input.addEventListener('blur', () => {
               if (input.value === "")
               {
                   input.value = min;
                   document.getElementById("quantityInput").value = input.value;
               }
           });
       });




    function getQuantity() {
        let getQuan=parseInt(document.getElementById("quantityInput").value) || 1;
        console.log(getQuan)
        return getQuan
    }

    async function addToCart(button) {
          const quantity = getQuantity();
        const data = {
            ProductId: button.dataset.productId,
            ProductName: button.dataset.productName,
            Image: button.dataset.imageUrl,
            Quantity: quantity,
            UnitPrice: parseFloat(button.dataset.price)
        };

         try {
             const response = await fetch('/ShoppingCart/AddToCart', {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json'
                 },
                 body: JSON.stringify(data)
             });

             if (response.ok) {
                 const result = await response.json();
                 alert('Đã thêm vào giỏ hàng!');
                //  let currentCount = parseInt(getCookieValue("CartItemNumber") || "0");
                // document.cookie = "CartItemNumber=" + currentCount + "; path=/";

                updateCartCountDisplay(); // <- this is defined in _Layout
                 console.log(result);
             } else {
                 const error = await response.text();
                 console.error(error);
                 alert('Có lỗi xảy ra khi thêm vào giỏ hàng.');
             }
         } catch (err) {
             console.error(err);
             alert('Lỗi kết nối đến máy chủ.');
         }
     }

     document.addEventListener('DOMContentLoaded', () => {
         document.querySelectorAll('.add-to-cart').forEach(button => {
             button.addEventListener('click', () => addToCart(button));
         });
     });


   

</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Đánh giá từ người dùng khác -->
<div class="container product-container mt-4">
    <h5 class="fw-bold mb-3">ĐÁNH GIÁ SẢN PHẨM</h5>

    <!-- Tổng quan đánh giá -->
    <div class="review-overview card border p-4 mb-4">
        <div class="d-flex align-items-center gap-4">
            <!-- Điểm đánh giá trung bình -->
            <div class="text-center">
                <div class="display-4 fw-bold" style="color: #6f42c1;">@average</div>
                <div class="text-muted">trên 5</div>
                <div class="mt-2">
                    @for (int i = 0; i < fullStars; i++)
                    {
                        <i class="bi bi-star-fill text-warning"></i>
                    }
                    @if (hasHalfStar)
                    {
                        <i class="bi bi-star-half text-warning"></i>
                    }
                    @for (int i = 0; i < emptyStars; i++)
                    {
                        <i class="bi bi-star text-muted"></i>
                    }
                </div>
            </div>
            <!-- Thống kê số lượng đánh giá theo sao (sẽ chỉnh lại sau để nhận trực tiếp dữ liệu) -->
            <div class="flex-grow-1">
                @for (int i = 0; i < 5; i++)
                {
                    var count = starCounts[i];
                    var percentage = total > 0 ? (count * 100 / total) : 0;

                    <div class="d-flex align-items-center mb-1">
                        <span class="me-2">@starLabels[i]</span>
                        <div class="progress flex-grow-1" style="height: 8px;">
                            <div class="progress-bar bg-warning" style="width: @percentage%"></div>
                        </div>
                        <span class="ms-2">(@count)</span>
                    </div>
                }
            </div>
        </div>

        <!-- Filter buttons -->
        <div class="mt-4">
            <button class="btn btn-outline-secondary me-2 mb-2">Tất Cả (@review.Count)</button>
            @for (int i = 5; i >= 1; i--)
            {
                <button class="btn btn-outline-secondary me-2 mb-2">@i Sao (@GetStarCount(i))</button>
            }
            <button class="btn btn-outline-secondary me-2 mb-2">Có Bình Luận (@countWithComment)</button>
            <button class="btn btn-outline-secondary mb-2">Có Hình Ảnh / Video (@countWithMedia)</button>
        </div>
    </div>

    <!-- Form thêm đánh giá -->
    @if (ViewBag.isLoggedIn == true)
    {
        <div class="card border p-4 mb-4">
            <h5 class="mb-3">Thêm đánh giá của bạn</h5>
            <form id="reviewForm" class="review-form">
                <input type="hidden" id="productId" value="@product.ProductId" />
                
                <div class="mb-3">
                    <label class="form-label">Đánh giá sao:</label>
                    <div class="star-rating-input">
                        @for (int i = 1; i <= 5; i++)
                        {
                            
                            <i class="bi bi-star star-selectable" data-rating="@i" style="cursor:pointer;"></i>
                        }
                    </div>
                    <input type="hidden" id="ratingInput" name="rating" value="0" />
                </div>

                <div class="mb-3">
                    <label for="commentInput" class="form-label">Nhận xét của bạn:</label>
                    <textarea class="form-control" id="commentInput" rows="3" placeholder="Chia sẻ trải nghiệm của bạn về sản phẩm..."></textarea>
                </div>

                <div class="mb-3">
                    <label class="form-label">Hình ảnh (không bắt buộc):</label>
                    <input type="file" class="form-control" id="imageInput" multiple accept="image/*" />
                    <div id="imagePreview" class="d-flex flex-wrap gap-2 mt-2"></div>
                </div>

                <button type="submit" class="btn btn-purple">Gửi đánh giá</button>
            </form>
        </div>
    }
    else
    {
        <div class="alert alert-info mb-4">
            Vui lòng <a href="/Authenticate/MyLogin" class="alert-link">đăng nhập</a> để thêm đánh giá.
        </div>
    }

    <!-- Danh sách đánh giá -->
    @if (review != null && review.Any())
    {
        <div id="reviewList">
            @foreach (var r in review)
            {
                <div class="card border p-3 mb-3 review-item" data-stars="@r.Stars" data-has-media="@(r.MediaURLs != null && r.MediaURLs.Any())" data-has-comment="@(!string.IsNullOrEmpty(r.Comment))">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="d-flex align-items-center gap-2">
                            <i class="bi bi-person rounded-circle bg-light d-flex justify-content-center align-items-center" style="font-size: 2rem; width: 40px; height: 40px; color: #6c757d;"></i>                            <div>
                                <strong>Người dùng @r.UserID</strong>
                                <div class="mt-1">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= r.Stars)
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star text-muted"></i>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <small class="text-muted">@r.CreatedTime.ToString("dd/MM/yyyy HH:mm")</small>
                    </div>
                    <p class="mt-3 mb-2">@r.Comment</p>
                    @if (r.MediaURLs != null && r.MediaURLs.Any())
                    {
                        <div class="mt-2 d-flex flex-wrap gap-2">
                            @foreach (var media in r.MediaURLs)
                            {
                                <img src="@media" alt="Hình ảnh đánh giá" 
                                     class="img-thumbnail" 
                                     style="width: 150px; height: 120px; object-fit: cover; cursor: pointer"
                                     onclick="window.open(this.src, '_blank')" />
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            Chưa có đánh giá nào cho sản phẩm này.
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Xử lý đánh giá sao
        const stars = document.querySelectorAll('.star-selectable');
        const ratingInput = document.getElementById('ratingInput');
        
        // Chức năng lọc đánh giá
        const filterButtons = document.querySelectorAll('.btn-outline-secondary');
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Xóa trạng thái active khỏi tất cả các nút
                filterButtons.forEach(btn => btn.classList.remove('active'));
                // Thêm trạng thái active cho nút được click
                this.classList.add('active');
                
                // Lấy tất cả các đánh giá
                const reviews = document.querySelectorAll('.review-item');
                
                // Áp dụng bộ lọc dựa trên nội dung của nút
                reviews.forEach(review => {
                    const stars = review.dataset.stars;
                    const hasMedia = review.dataset.hasMedia === 'True';
                    const hasComment = review.dataset.hasComment === 'True';
                    
                    let shouldShow = false;
                    const buttonText = this.textContent.trim();
                    
                    // Xác định điều kiện hiển thị
                    if (buttonText === 'Tất Cả') {
                        shouldShow = true;
                    } else if (buttonText.includes('Sao')) {
                        const filterStars = buttonText.split(' ')[0];
                        shouldShow = stars === filterStars;
                    } else if (buttonText.includes('Có Hình Ảnh')) {
                        shouldShow = hasMedia;
                    } else if (buttonText.includes('Có Bình Luận')) {
                        shouldShow = hasComment;
                    }
                    
                    // Hiển thị hoặc ẩn đánh giá tương ứng
                    review.style.display = shouldShow ? 'block' : 'none';
                });
            });
        });
        
        // Xử lý hiển thị sao khi người dùng đánh giá
        stars.forEach(star => {
            star.addEventListener('click', () => {
                const rating = star.dataset.rating;
                ratingInput.value = rating;
                
                // Cập nhật hiển thị sao
                stars.forEach(s => {
                    if (s.dataset.rating <= rating) {
                        s.classList.remove('bi-star');
                        s.classList.add('bi-star-fill');
                        s.classList.add('active');
                    } else {
                        s.classList.add('bi-star');
                        s.classList.remove('bi-star-fill');
                        s.classList.remove('active');
                    }
                });
            });
        });
        
        // Xử lý xem trước hình ảnh
        const imageInput = document.getElementById('imageInput');
        const imagePreview = document.getElementById('imagePreview');
        
        imageInput.addEventListener('change', function() {
            imagePreview.innerHTML = '';
            [...this.files].forEach(file => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'img-thumbnail';
                        imagePreview.appendChild(img);
                    }
                    reader.readAsDataURL(file);
                }
            });
        });
        
        // Xử lý gửi đánh giá
        const reviewForm = document.getElementById('reviewForm');
        reviewForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const rating = document.getElementById('ratingInput').value;
            const comment = document.getElementById('commentInput').value;
            const productId = document.getElementById('productId').value;
            
            // Kiểm tra đánh giá sao
            if (!rating || rating === '0') {
                alert('Vui lòng chọn số sao đánh giá');
                return;
            }
            
            // Kiểm tra nội dung bình luận
            if (!comment.trim()) {
                alert('Vui lòng nhập nhận xét của bạn');
                return;
            }
            
            // Chuẩn bị dữ liệu gửi lên server
            const formData = new FormData();
            formData.append('productId', productId);
            formData.append('rating', rating);
            formData.append('comment', comment);
            
            // Thêm các file hình ảnh vào form
            const imageFiles = document.getElementById('imageInput').files;
            for (let i = 0; i < imageFiles.length; i++) {
                formData.append('images', imageFiles[i]);
            }
            
            try {
                const response = await fetch('/Product/AddReview', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const review = await response.json();
                    alert('Cảm ơn bạn đã đánh giá sản phẩm!');
                    console.log('Đánh giá đã gửi thành công:', review);
                   /*  location.reload(); */ // Tải lại trang để hiển thị đánh giá mới
                } else {
                    alert('Có lỗi xảy ra khi gửi đánh giá. Vui lòng thử lại sau.');
                }
            } catch (error) {
                console.error('Lỗi:', error);
                alert('Có lỗi xảy ra khi gửi đánh giá. Vui lòng thử lại sau.');
            }
        });
    });
</script>