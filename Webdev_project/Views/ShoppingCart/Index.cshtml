@model List<Webdev_project.Models.CartItem>
@{
    ViewData["Title"] = "Giỏ Hàng";
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Giỏ Hàng</title>
    <style>
        .cart-container {
            display: flex;
            gap: 20px;
            max-width: 1200px;
            margin: 30px auto;
            align-items: flex-start;
        }

        .cart-items {
            flex: 3;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 20px;
        }

        .cart-summary {
            flex: 1;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 20px;
            position: sticky;
            top: 20px;
        }

        .cart-items h3 {
            font-weight: bold;
            margin-bottom: 15px;
            font-size: 1.4rem;
        }

        .header-row, .product-row {
            display: grid;
            grid-template-columns: 40px 3fr 1fr 1fr 1fr;
            align-items: center;
            gap: 10px;
            padding: 10px 0;
        }

            .header-row > *:nth-child(2),
            .product-row > *:nth-child(2) {
                text-align: left;
            }

            .header-row > *:nth-child(3),
            .product-row > *:nth-child(3) {
                text-align: center;
            }

            .header-row > *:nth-child(4),
            .product-row > *:nth-child(4) {
                text-align: center;
            }

            .header-row > *:nth-child(5),
            .product-row > *:nth-child(5) {
                text-align: left;
            }

        .header-row {
            font-weight: bold;
            border-bottom: 2px solid #eee;
        }

        .product-row {
            border-bottom: 1px solid #eee;
        }

        .product-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .product-img {
            width: 70px;
            height: 70px;
            border-radius: 6px;
            object-fit: cover;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 5px;
            justify-content: center;
        }

            .quantity-controls button {
                width: 30px;
                height: 30px;
                border: 1px solid #ddd;
                background: linear-gradient(90deg, #3a7bd5, #6a11cb);
                font-weight: bold;
                border-radius: 4px;
                cursor: pointer;
                color: white;
            }

            .quantity-controls span {
                width: 30px;
                text-align: center;
                font-weight: bold;
            }

        .product-price {
            color: #dc3545;
            font-weight: bold;
            text-align: center;
        }

        .remove-button button {
            background: none;
            border: none;
            color: #dc3545;
            cursor: pointer;
            text-decoration: underline;
        }

        .cart-summary h4 {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .cart-summary .total {
            font-size: 1.5rem;
            color: #dc3545;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .cart-summary button {
            width: 100%;
            background: linear-gradient(90deg, #3a7bd5, #6a11cb);
            color: white;
            padding: 12px;
            font-weight: bold;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            width: 100%;
        }

            .empty-cart img {
                max-width: 180px;
                border-radius: 50%; /* Làm tròn ảnh */
                border: 2px solid #ddd; /* (Tùy chọn) viền nhẹ nếu muốn */
                object-fit: cover; /* Đảm bảo ảnh không méo */
            }

            .empty-cart p {
                font-size: 18px;
                margin: 15px 0;
            }

            .empty-cart a {
                background: linear-gradient(90deg, #3a7bd5, #6a11cb);
                color: white;
                padding: 10px 20px;
                border-radius: 6px;
                text-decoration: none;
                font-weight: bold;
                font-size: 16px;
            }


        media (max-width: 768px) {
            .cart-container

        {
            flex-direction: column;
        }

        .header-row {
            display: none;
        }

        .product-row {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
            padding: 15px;
            background: #fff;
            border-radius: 10px;
            margin-bottom: 10px;
        }

            .product-row > input,
            .product-info,
            .quantity-controls,
            .product-price,
            .remove-button {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

                .product-info::before {
                    content: "Sản phẩm: ";
                    font-weight: bold;
                }

                .quantity-controls::before {
                    content: "Số lượng: ";
                    font-weight: bold;
                }

                .product-price::before {
                    content: "Thành tiền: ";
                    font-weight: bold;
                }

                .remove-button::before {
                    content: "Thao tác: ";
                    font-weight: bold;
                }
    </style>
</head>
<body>

    <div class="cart-container">
        <div class="cart-items">
            <h3><i class="bi bi-cart"></i> Giỏ hàng của bạn</h3>

            @if (!Model.Any())
            {
                <div class="empty-cart">
                    <img src="~/images/cart.png" alt="Giỏ hàng trống" />
                    <p>Chưa có sản phẩm trong giỏ hàng của bạn.</p>
                    <a href="/Home/Index">MUA SẮM NGAY</a>
                </div>
            }
            else
            {
                <div class="header-row">
                    <input type="checkbox" id="selectAll" onchange="toggleAll(this)" />
                    <span>Sản phẩm</span>
                    <span>Số lượng</span>
                    <span>Thành tiền</span>
                    <span>Thao tác</span>
                </div>

                @foreach (var item in Model)
                {
                    <div class="product-row" id="row-@item.ProductId">
                        <input type="checkbox" class="product-check"
                               data-product-id="@item.ProductId"
                               data-quantity="@item.Quantity"
                               data-unit-price="@item.UnitPrice"
                               data-name="@item.ProductName"
                               data-image="@item.Image"
                               data-price="@(item.UnitPrice * item.Quantity)"
                               onchange="updateCartTotal()" />

                        <div class="product-info">
                            <img src="@item.Image" class="product-img" alt="@item.ProductName" />
                            <div>
                                <strong>@item.ProductName</strong><br />
                                <span>@item.UnitPrice.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN")) ₫</span>
                            </div>
                        </div>
                        <div class="quantity-controls">
                            <button type="button" class="btn-decrease" data-product-id="@item.ProductId">-</button>
                            <span>@item.Quantity</span>
                            <button type="button" class="btn-increase" data-product-id="@item.ProductId">+</button>
                        </div>
                        <div class="product-price" data-unit-price="@item.UnitPrice">
                            @((item.UnitPrice * item.Quantity).ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))) ₫
                        </div>
                        <div class="remove-button">
                            <form asp-action="RemoveItem" method="post" style="display:inline;">
                                <input type="hidden" name="productId" value="@item.ProductId" />
                                <button type="submit" title="Xóa" aria-label="Xóa">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"
                                         class="bi bi-trash3 text-danger" viewBox="0 0 16 16" style="margin-left: 15px;">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1z" />
                                    </svg>
                                </button>
                            </form>
                        </div>
                    </div>
                }
            }
        </div>

        @if (Model.Any())
        {
            <div class="cart-summary">
                <h4>Tổng thanh toán:</h4>
                <div class="total" id="cart-total">₫0</div>
                <form id="paymentForm" method="post" action="/Payment/BuyItems">
                    <input type="hidden" name="selectedItems" id="selectedItemsJson" />
                    <button type="submit" id="submit-selected">Mua hàng</button>
                </form>
            </div>
        }
    </div>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function formatCurrency(number) {
            return number.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        }

        function updateCartTotal() {
            let total = 0;
            let checkedCount = 0;

            $('input.product-check:checked').each(function () {
                const $row = $(this).closest('.product-row');
                const unitPrice = parseFloat($row.find('.product-price').data('unit-price'));
                const qty = parseInt($row.find('.quantity-controls span').text());
                if (!isNaN(unitPrice) && !isNaN(qty)) {
                    total += unitPrice * qty;
                    checkedCount++;
                }
            });

            const $cartTotal = $('#cart-total');
            if (checkedCount > 0) {
                $cartTotal.text(formatCurrency(total)).removeClass('d-none');
            } else {
                $cartTotal.text('0₫').removeClass('d-none');
            }
        }


        function toggleAll(source) {
            $('input.product-check').prop('checked', source.checked);
            updateCartTotal();
        }

        $(document).ready(function () {
            // Bắt sự kiện checkbox thay đổi
            $('input.product-check').change(updateCartTotal);
            $('#selectAll').change(function () {
                toggleAll(this);
            });




            const debounceTimers = {};

            // VERSION 3


        $('.btn-increase').click(function () {
            const productId = $(this).data('product-id');

            // Clear previous debounce timer for this product
            clearTimeout(debounceTimers[productId]);

            const $row = $('#row-' + productId);
            const $quantitySpan = $row.find('.quantity-controls span');

            // 👇 Increase current quantity and update UI immediately
            let currentQuantity = parseInt($quantitySpan.text());
            const newQuantity = currentQuantity + 1;
            $quantitySpan.text(newQuantity);

            // Update total price and checkbox data-quantity
            const unitPrice = parseFloat($row.find('.product-price').data('unit-price'));
            const totalPrice = unitPrice * newQuantity;
            $row.find('.product-price').text(formatCurrency(totalPrice));
            $row.find('input.product-check')
                .data('quantity', newQuantity)
                .attr('data-quantity', newQuantity);

            // ✅ Debounce server update with actual quantity
            debounceTimers[productId] = setTimeout(() => {
                $.post('/ShoppingCart/UpdateQuantity', {
                    productId: productId,
                    quantity: newQuantity  // 👈 Send full quantity now
                }, function (updatedQuantity) {
                    updateCartTotal();  // Optional refresh
                });
            }, 750);
        });

            //VERSION 3

        $('.btn-decrease').click(function () {
            const productId = $(this).data('product-id');

            // Clear existing timer
            clearTimeout(debounceTimers[productId]);

            const $row = $('#row-' + productId);
            const $quantitySpan = $row.find('.quantity-controls span');

            let currentQuantity = parseInt($quantitySpan.text());

            if (currentQuantity <= 1) return; // Optional: prevent going below 1

            const newQuantity = currentQuantity - 1;
            $quantitySpan.text(newQuantity);

            const unitPrice = parseFloat($row.find('.product-price').data('unit-price'));
            const totalPrice = unitPrice * newQuantity;
            $row.find('.product-price').text(formatCurrency(totalPrice));

            $row.find('input.product-check')
                .data('quantity', newQuantity)
                .attr('data-quantity', newQuantity);

            // Debounce: send current quantity to server
            debounceTimers[productId] = setTimeout(() => {
                $.post('/ShoppingCart/UpdateQuantity', {
                    productId: productId,
                    quantity: newQuantity
                }, function (updatedQuantity) {
                    updateCartTotal();  // Optional
                });
            }, 750);
        });




            // Xử lý nút xóa (giữ form submit ajax)
                   $('.remove-button form').on('submit', function (e) {
            e.preventDefault();

            const $form = $(this);
            const productId = $form.find('input[name="productId"]').val();

            $.post($form.attr('action') || '/ShoppingCart/RemoveItem', $form.serialize())
                .done(function () {
                    $('#row-' + productId).remove();
                    updateCartTotal();

                    // 👉 Nếu không còn sản phẩm nào, reload lại để Razor render giao diện giỏ hàng trống
                    if ($('.product-row').length === 0) {
                        location.reload();
                    }
                })
                .fail(function () {
                    alert('Xóa sản phẩm thất bại!');
                    console.log(productId);
                });
        });


            // Khởi tạo tổng tiền lúc đầu
            updateCartTotal();
        });




























        //SUBMIT FORM

                document.getElementById("paymentForm").addEventListener("submit", function (e) {
            const selectedItems = [];

            document.querySelectorAll(".product-check:checked").forEach(checkbox => {
                const row = checkbox.closest(".product-row");
                const quantity = parseInt(row.querySelector(".quantity-controls span").innerText);

                const item = {
                    productId: checkbox.dataset.productId,
                    productName: checkbox.dataset.name,
                    image: checkbox.dataset.image,
                    quantity: quantity,
                    unitPrice: parseInt(checkbox.dataset.unitPrice)
                };

                selectedItems.push(item);
            });

            // Inject JSON string into hidden input
            document.getElementById("selectedItemsJson").value = JSON.stringify(selectedItems);

            // Allow the form to submit as usual
        });










    </script>

</body>
</html>
