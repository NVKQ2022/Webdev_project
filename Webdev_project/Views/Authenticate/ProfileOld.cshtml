@using Webdev_project.Models
@{
    ViewData["Title"] = "Thông tin tài khoản";
    Layout = "~/Views/Shared/_Layout.cshtml";
    User user = ViewBag.User;

    /* var userDetail =ViewBag.UserDetail; */
    // List<ReceiveInfo>? receiveInfos = userDetail.ReceiveInfo;

    var userDetail = ViewBag.UserDetail;

    List<ReceiveInfo>? receiveInfos = userDetail != null ? userDetail.ReceiveInfo : new List<ReceiveInfo>();
    var notifi = ViewBag.Notifications;// fix to orders

    var orders = ViewBag.Orders;


}

<style>
    body {
        background-color: #f5f5f5;
    }

    .profile-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .profile-sidebar {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .profile-main {
        background-color: white;
        padding: 40px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .profile-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        margin-bottom: 20px;
    }

    .sidebar-link {
        display: block;
        padding: 12px 0;
        color: #333;
        text-decoration: none;
        transition: color 0.3s;
        font-size: 1rem;
    }

    .sidebar-link:hover {
        color: #6f42c1;
    }

    .sidebar-link.active {
        color: #6f42c1;
        font-weight: 600;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 10px;
        font-size: 0.95rem;
    }

    .form-control {
        padding: 10px 15px;
    }

    .btn-purple {
        background-color: #6f42c1;
        border-color: #6f42c1;
        color: white;
        padding: 12px 30px;
        font-size: 1rem;
    }

    .btn-purple:hover {
        background-color: #5a32a3;
        border-color: #5a32a3;
        color: white;
    }

    .row > [class*='col-'] {
        padding: 0 15px;
    }

    /* Order Management Styles */
    .notification-item {
        background-color: white;
        border-bottom: 1px solid #f0eaea;
        padding: 20px;
        transition: background-color 0.3s;
    }

    .notification-item:hover {
        background-color: #fff8f6;
    }

    .order-header {
        background-color: white;
        padding: 20px;
        border-radius: 8px 8px 0 0;
        border-bottom: 1px solid #f0eaea;
        margin-bottom: 0;
    }

    .content-section {
        display: none;
    }

    .content-section.active {
        display: block !important;
    }

    #orderManagement img {
        object-fit: cover;
    }

    /* Override any white backgrounds */
    .container-fluid, .bg-white {
        background-color: #f5f5f5 !important;
    }

    /* Styles cho phần địa chỉ */
    .address-content {
        font-size: 14px;
        line-height: 1.5;
        margin-bottom: 10px;
    }

    .address-text {
        display: block;
        margin-top: 4px;
        color: #333;
    }

    .default-badge {
        display: inline-block;
        padding: 2px 6px;
        background-color: #ebe3f9;
        color: #6f42c1;
        font-size: 12px;
        border: 1px solid #6f42c1;
        border-radius: 3px;
        margin-left: 10px;
    }

    .change-link {
        float: right;
        color: #6f42c1;
        cursor: pointer;
        font-size: 13px;
        text-decoration: underline;
    }

    .address-list {
        margin-top: 12px;
        border-top: 1px solid #eee;
        padding-top: 12px;
    }

    .address-option {
        display: flex;
        gap: 8px;
        align-items: flex-start;
        margin-bottom: 12px;
        position: relative;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 8px;
    }

    .address-option:hover {
        background-color: #f8f9fa;
    }

    .delete-btn {
        position: absolute;
        right: 10px;
        top: 10px;
        padding: 5px 10px;
        background-color: transparent;
        border: 1px solid #dc3545;
        color: #dc3545;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .delete-btn:hover {
        background-color: #dc3545;
        color: white;
    }

    .address-option input[type="radio"] {
        margin-top: 6px;
    }

    .address-details {
        font-size: 13px;
        color: #555;
    }

    .new-address-form {
        margin-top: 10px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background-color: #f9f9f9;
    }

    .form-field {
        margin-bottom: 10px;
    }

    .input-field {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 6px;
        width: 100%;
        box-sizing: border-box;
    }

    .add-address-btn {
        background: none;
        border: 1px dashed #c2bde5;
        padding: 8px;
        font-size: 14px;
        width: 100%;
        border-radius: 5px;
        margin-top: 10px;
        cursor: pointer;
        color: #6f42c1;
    }

    .button-group {
        text-align: right;
        margin-top: 12px;
    }

    .btn-cancel,
    .btn-confirm {
        padding: 6px 14px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
        margin-left: 8px;
    }

    .btn-cancel {
        background-color: #eee;
        color: #333;
    }

    .btn-confirm {
        background-color: #6f42c1;
        color: white;
    }

    .hidden {
        display: none;
    }

    .empty-order-message {
        text-align: center;
        padding: 60px 20px;
        width: 100%;
    }

        .empty-order-message img {
            max-width: 140px;
            border-radius: 50%;
            border: 2px solid #ddd;
            object-fit: cover;
        }

        .empty-order-message p {
            font-size: 18px;
            margin: 15px 0;
        }

        .empty-order-message a {
            background: linear-gradient(90deg, #3a7bd5, #6a11cb);
            color: white;
            padding: 10px 20px;
            border-radius: 6px;
            text-decoration: none;
            font-weight: bold;
            font-size: 16px;
        }

    .custom-order-tabs {
        display: flex;
        overflow-x: auto;
        border-bottom: 2px solid #f5f5f5;
        background-color: #fff;
    }

    .order-tab {
        padding: 10px 16px;
        color: #333;
        font-weight: 500;
        text-decoration: none;
        border-bottom: 2px solid transparent;
        white-space: nowrap;
        transition: all 0.3s ease;
    }

        .order-tab:hover {
            color: #6a11cb;
        }

        .order-tab.active {
            color: #6a11cb;
            border-bottom: 2px solid #6a11cb;
            font-weight: 600;
        }
</style>

<div class="container profile-container">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <div class="profile-sidebar">
                <div class="text-center mb-4">
                    <img src="https://cdn-icons-png.flaticon.com/512/1946/1946429.png" alt="Profile" class="profile-avatar">
                    <h5>@user.Username</h5>
                </div>
                <div>

                   @*  BAN CU *@
                    @* <a href="#" class="sidebar-link active" onclick="showSection('profile'); return false;">
                        <i class="fas fa-user me-2"></i>
                        Thông tin tài khoản
                    </a>
                    <a href="#" class="sidebar-link" onclick="showSection('addressBook'); return false;">
                        <i class="fas fa-map-marker-alt me-2"></i>
                        Sổ địa chỉ
                    </a>
                    <a href="#" class="sidebar-link" onclick="showSection('orderManagement'); return false;">
                        <i class="fas fa-shopping-bag me-2"></i>
                        Quản lý đơn hàng
                    </a> *@

                    <a href="#profile" class="sidebar-link">
                        <i class="fas fa-user me-2"></i> Thông tin tài khoản
                    </a>
                    <a href="#addressBook" class="sidebar-link">
                        <i class="fas fa-map-marker-alt me-2"></i> Sổ địa chỉ
                    </a>
                    <a href="#orderManagement" class="sidebar-link">
                        <i class="fas fa-shopping-bag me-2"></i> Quản lý đơn hàng
                    </a>

                    <a href="#" class="sidebar-link">
                        <i class="fas fa-eye me-2"></i>
                        Sản phẩm đã xem
                    </a>
                    <a href="#" class="sidebar-link">
                        <i class="fas fa-sign-out-alt me-2"></i>
                        Đăng xuất
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <!-- Profile Section -->
            <div id="profile" class="content-section active">
                <div class="profile-main">
                    <h4 class="mb-4">Thông tin tài khoản</h4>
                    <form id="profileForm">
                        <input type="hidden" name="Id" value="@(userDetail?.Id ?? "")" />

                        <div class="form-group">
                            <label>Họ tên</label>
                            <input type="text" name="Name" class="form-control" value="@(userDetail?.Name ?? "")" />
                        </div>

                        <div class="form-group">
                            <label>Giới tính</label>
                            <div>
                                <label class="me-3">
                                    <input type="radio" name="Gender" value="Nam" @(userDetail?.Gender == "Nam" ? "checked" : "") /> Nam
                                </label>
                                <label>
                                    <input type="radio" name="Gender" value="Nữ" @(userDetail?.Gender == "Nữ" ? "checked" : "") /> Nữ
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Số điện thoại</label>
                            <input type="tel" name="PhoneNumber" class="form-control" value="@(userDetail?.PhoneNumber ?? "")" />
                        </div>

                        <div class="form-group">
                            <label>Ngày sinh</label>
                            <input type="date" name="Birthday" class="form-control" value="@(userDetail?.Birthday.ToString("yyyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd"))" />
                        </div>

                        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                    </form>

                    <div id="updateMessage" class="mt-3 text-success"></div>

                </div>
            </div>

            <!-- Address Book Section -->
            <div id="addressBook" class="content-section">
                <div class="profile-main">
                    <h4 class="mb-4">Sổ địa chỉ</h4>
                    
                    <!-- Existing Addresses -->
                    @if (receiveInfos != null && receiveInfos.Any())
                    {
                        <div class="address-list mb-4">
                            @foreach (var address in receiveInfos)
                            {
                                <label class="address-option">
                                    <input type="radio" name="selectedAddress" @(address == receiveInfos.First() ? "checked" : "") />
                                    <div>
                                        <strong>@address.Name</strong> - @address.Phone
                                        <div class="address-details">@address.Address</div>
                                        @if (address == receiveInfos.First())
                                        {
                                            <span class="default-badge">Mặc định</span>
                                        }
                                    </div>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-order-message">
                            <img src="~/images/map.png" alt="Không có địa chỉ" />
                            <p>Bạn chưa có địa chỉ nhận hàng nào.</p>
                        </div>
                    }



                    <!-- Add New Address Button -->
                    <button class="add-address-btn" onclick="showAddForm()">+ Thêm địa chỉ mới</button>

                    <!-- Add New Address Form -->
                    <div class="new-address-form hidden" id="newAddressForm">
                        <form id="addressForm" method="post">
                            <div class="form-field">
                                <input type="text" id="fullName" name="name" placeholder="Họ và tên" class="input-field" value="@user.Username" required />
                            </div>
                            <div class="form-field">
                                <input type="text" id="phone" name="phone" placeholder="Số điện thoại" class="input-field" value="@(userDetail?.PhoneNumber ?? "")" required />
                            </div>
                            <div class="form-field">
                                <select id="province" class="input-field" onchange="loadDistricts()" required>
                                    <option value="">Chọn Tỉnh/Thành phố</option>
                                </select>
                            </div>
                            <div class="form-field">
                                <select id="district" class="input-field" onchange="loadWards()" required>
                                    <option value="">Chọn Quận/Huyện</option>
                                </select>
                            </div>
                            <div class="form-field">
                                <select id="ward" class="input-field" required>
                                    <option value="">Chọn Phường/Xã</option>
                                </select>
                            </div>
                            <div class="form-field">
                                <input type="text" id="details" name="details" placeholder="Địa chỉ cụ thể (số nhà, tên đường...)" class="input-field" required />
                            </div>
                            <div class="form-check mb-3">
                                <input type="checkbox" class="form-check-input" id="setAsDefault" name="setAsDefault">
                                <label class="form-check-label" for="setAsDefault">Đặt làm địa chỉ mặc định</label>
                            </div>
                            <div class="button-group">
                                <button type="button" class="btn-cancel" onclick="hideAddForm()">Trở lại</button>
                                <button type="submit" class="btn-confirm">Thêm địa chỉ</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Order Management Section -->
            <div id="orderManagement" class="content-section">
                <div class="profile-main p-0">
                    <div class="d-flex justify-content-between align-items-center order-header">
                        <h4 class="mb-0">Cập Nhật Đơn Hàng</h4>
                        <a href="#" class="btn btn-outline-secondary btn-sm">Đánh dấu đã đọc tất cả</a>
                    </div>

                    <!-- Tabs thay cho dropdown -->
                    <div class="custom-order-tabs mb-3" id="orderTabs">
                        <a class="order-tab active" data-status="all" href="#">Tất cả</a>
                        <a class="order-tab" data-status="Pending" href="#">Chờ thanh toán</a>
                        <a class="order-tab" data-status="Shipped" href="#">Vận chuyển</a>
                        <a class="order-tab" data-status="Delivering" href="#">Chờ giao hàng</a>
                        <a class="order-tab" data-status="Delivered" href="#">Hoàn thành</a>
                        <a class="order-tab" data-status="Cancelled" href="#">Đã huỷ</a>
                        <a class="order-tab" data-status="Refunded" href="#">Trả hàng/Hoàn tiền</a>
                    </div>


                    <div id="noOrdersMessage" class="empty-order-message" style="display: none;">
                        <img src="~/images/cart.png" alt="Không có đơn hàng" />
                        <p>Bạn chưa có đơn hàng nào trong mục này.</p>
                        <a href="/Home/Index">MUA SẮM NGAY</a>
                    </div>


                    @if (orders == null)
                    {
                        <p class="text-danger">Không có dữ liệu đơn hàng</p>
                    }
                    else
                    {
                        @foreach (var order in orders)
                        {
                            <div class="border rounded p-3 mb-4 bg-light order-card" data-status="@order.Status">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div>
                                        <strong>Trạng thái:</strong> @order.Status<br />
                                        <strong>Mã đơn hàng:</strong> @order.OrderID<br />
                                        <span class="text-muted small">@order.CreatedAt.ToLocalTime().ToString("HH:mm dd-MM-yyyy")</span>
                                    </div>
                                    <div>
                                        <a href="/Order/Detail/@order.OrderID" class="btn btn-outline-secondary btn-sm">Chi tiết</a>
                                    </div>
                                </div>

                                @foreach (var item in order.Items)
                                {
                                    <div class="d-flex align-items-start mb-3 ps-2">
                                        <img src="@item.Image" width="80" height="80" class="me-3 rounded border" />
                                        <div>
                                            <a href="/Product/Detail/@item.ProductID" class="fw-bold text-decoration-none">
                                                @item.ProductName
                                            </a>
                                            <div>Số lượng: @item.Quantity</div>
                                            <div>Giá mỗi cái: <strong>@item.UnitPrice.ToString("N0")₫</strong></div>
                                        </div>
                                    </div>
                                }

                                <div class="text-end mt-2">
                                    <strong>Tổng cộng:</strong> @order.TotalAmount.ToString("N0")₫
                                </div>

                                <div class="text-end mt-3">
                                    @if (order.Status == "Pending")
                                    {
                                        <button class="btn btn-danger btn-sm">Huỷ đơn</button>
                                    }
                                    else if (order.Status == "Delivered")
                                    {
                                        <button class="btn btn-outline-primary btn-sm">Đánh giá sản phẩm</button>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    //  ???
        document.getElementById("profileForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);

            const json = {};
            formData.forEach((value, key) => {
                json[key] = value;
            });

            fetch('/Authenticate/UpdateProfile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(json)
            })
            .then(res => res.ok ? res.json() : Promise.reject("Có lỗi xảy ra"))
            .then(data => {
                document.getElementById("updateMessage").innerText = data.message;
            })
            .catch(err => {
                document.getElementById("updateMessage").innerText = err;
            });
        });




    // function showSection(sectionId) {
    //     // Hide all sections
    //     document.querySelectorAll('.content-section').forEach(section => {
    //         section.classList.remove('active');
    //     });
        
    //     // Show selected section
    //     const selectedSection = document.getElementById(sectionId);
    //     if (selectedSection) {
    //         selectedSection.classList.add('active');
    //     }
        
    //     // Update active state of sidebar links
    //     document.querySelectorAll('.sidebar-link').forEach(link => {
    //         link.classList.remove('active');
    //     });
        
    //     const currentLink = document.querySelector(`.sidebar-link[onclick*="${sectionId}"]`);
    //     if (currentLink) {
    //         currentLink.classList.add('active');
    //     }
    // }




    // NEW SELECTION
       function showSection(sectionId) {
            console.log("Trying to show:", sectionId);

            // Hide all sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });

            // Show the correct section
            const selectedSection = document.getElementById(sectionId);
            if (selectedSection) {
                selectedSection.classList.add('active');
            } else {
                console.warn("Section not found:", sectionId);
            }

            // Update sidebar active state
            document.querySelectorAll('.sidebar-link').forEach(link => {
                const href = link.getAttribute('href');
                if (href === `#${sectionId}`) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            const hash = window.location.hash ? window.location.hash.substring(1) : "profile";
            console.log("Page loaded with hash:", hash);
            showSection(hash);

            // Add click listeners to sidebar links
            document.querySelectorAll('.sidebar-link').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const sectionId = this.getAttribute('href').substring(1);
                    showSection(sectionId);
                    history.pushState(null, "", `#${sectionId}`);
                });
            });
        });


            window.addEventListener("load", function () {
        const hash = window.location.hash ? window.location.hash.substring(1) : "profile";
        console.log("Fully loaded, hash:", hash);
        showSection(hash);

        // Sidebar click listeners
        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const sectionId = this.getAttribute('href').substring(1);
                showSection(sectionId);
                history.pushState(null, "", `#${sectionId}`);
            });
        });
    });




        // Optional: Handle browser back/forward navigation
        window.addEventListener('popstate', function () {
            const hash = window.location.hash ? window.location.hash.substring(1) : "profile";
            showSection(hash);
        });


    // Khởi tạo danh sách địa chỉ từ receiveInfos
    let addresses = [];

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        document.body.style.backgroundColor = '#f5f5f5';
        showSection('profile');
        
        // Khởi tạo addresses từ receiveInfos
        @if (receiveInfos != null)
        {
            foreach (var addr in receiveInfos)
            {
                @:addresses.push({
                    @:name: "@addr.Name",
                    @:phone: "@addr.Phone",
                    @:address: "@addr.Address"
                @:});
            }
        }
        
        // Hiển thị danh sách địa chỉ ban đầu
        updateAddressList();
    });

    // Ẩn/Hiện danh sách địa chỉ người nhận
    function showAddressList() {
        document.getElementById("addressList").classList.remove("hidden");
    }

    function hideAddressList() {
        document.getElementById("addressList").classList.add("hidden");
    }

    // Ẩn/hiện form thêm địa chỉ mới
    function showAddForm() {
        document.getElementById("newAddressForm").classList.remove("hidden");
        const addButton = document.querySelector(".add-address-btn");
        if (addButton) {
            addButton.classList.add("hidden");
        }
    }

    function hideAddForm() {
        document.getElementById("newAddressForm").classList.add("hidden");
        const addButton = document.querySelector(".add-address-btn");
        if (addButton) {
            addButton.classList.remove("hidden");
        }
        clearForm();
    }

    // Clear Form
    function clearForm() {
        document.getElementById("phone").value = "@userDetail?.PhoneNumber";
        document.getElementById("province").value = "";
        document.getElementById("district").value = "";
        document.getElementById("ward").value = "";
        document.getElementById("details").value = "";
        document.getElementById("setAsDefault").checked = false;
    }

    // Số điện thoại đúng chuẩn
    function isValidPhone(phone) {
        return /^\d{10}$/.test(phone);
    }

    // Thêm địa chỉ
    // document.getElementById('addressForm').addEventListener('submit', async function(event) {






    // document.getElementById('addressForm').addEventListener('submit', function(event) {
    //     event.preventDefault();
    //     console.log('Form submitted');

    //     const name = document.getElementById("fullName").value.trim();
    //     const phone = document.getElementById("phone").value.trim();
    //     const province = document.getElementById("province").options[document.getElementById("province").selectedIndex].text;
    //     const district = document.getElementById("district").options[document.getElementById("district").selectedIndex].text;
    //     const ward = document.getElementById("ward").value;
    //     const details = document.getElementById("details").value.trim();

    //     if (!name || !phone || !province || !district || !ward || !details) {
    //         alert("Vui lòng nhập đầy đủ thông tin địa chỉ.");
    //         return;
    //     }

    //     if (!isValidPhone(phone)) {
    //         alert("Số điện thoại không hợp lệ. Vui lòng nhập lại.");
    //         return;
    //     }

    //     const fullAddress = `${details}, ${ward}, ${district}, ${province}`;
    //     // console.log('Sending address:', { name, phone, address: fullAddress });
    //     // Thêm địa chỉ mới vào mảng addresses
    //     addresses.push({
    //         name: name,
    //         phone: phone,
    //         address: fullAddress
    //     });

    //     // Cập nhật giao diện
    //     updateAddressList();
        
    //     // Đóng form và hiển thị thông báo
    //     hideAddForm();
    //     alert('Thêm địa chỉ thành công!');

    //     Code cố dùng database
    //     try {
    //         const response = await fetch('/Home/AddAddress', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/x-www-form-urlencoded',
    //             },
    //             body: `name=${encodeURIComponent(name)}&phone=${encodeURIComponent(phone)}&address=${encodeURIComponent(fullAddress)}`
    //         });

    //         const result = await response.json();
    //         console.log('Response:', result);

    //         if (result.success) {
    //             alert('Thêm địa chỉ thành công!');
    //             window.location.reload();
    //         } else {
    //             throw new Error(result.message || 'Không thể thêm địa chỉ');
    //         }
    //     } catch (error) {
    //         console.error('Error:', error);
    //         alert("Có lỗi xảy ra khi thêm địa chỉ. Vui lòng thử lại.");
    //     }
       
    // });




    document.getElementById('addressForm').addEventListener('submit', async function (event) {
    event.preventDefault();

    const name = document.getElementById("fullName").value.trim();
    const phone = document.getElementById("phone").value.trim();
    const province = document.getElementById("province").options[document.getElementById("province").selectedIndex].text;
    const district = document.getElementById("district").options[document.getElementById("district").selectedIndex].text;
    const ward = document.getElementById("ward").options[document.getElementById("ward").selectedIndex].text;
    const details = document.getElementById("details").value.trim();

    if (!name || !phone || !province || !district || !ward || !details) {
        alert("Vui lòng nhập đầy đủ thông tin địa chỉ.");
        return;
    }

    if (!isValidPhone(phone)) {
        alert("Số điện thoại không hợp lệ. Vui lòng nhập lại.");
        return;
    }

    const fullAddress = `${details}, ${ward}, ${district}, ${province}`;

    try {
        const response = await fetch('/Authenticate/AddAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `name=${encodeURIComponent(name)}&phone=${encodeURIComponent(phone)}&address=${encodeURIComponent(fullAddress)}`
        });

        const result = await response.json();
        console.log('Response:', result);

        if (result.success) {
            // Optional: Update addresses array/UI
            if (typeof addresses !== "undefined") {
                addresses.push({ name, phone, address: fullAddress });
                updateAddressList();
            }

            hideAddForm();
            alert('Thêm địa chỉ thành công!');
            window.location.reload();
        } else {
            throw new Error(result.message || 'Không thể thêm địa chỉ');
        }
    } catch (error) {
        console.error('Error:', error);
        alert("Có lỗi xảy ra khi thêm địa chỉ. Vui lòng thử lại.");
    }
});



    // Hàm cập nhật giao diện danh sách địa chỉ
        function updateAddressList() {
        const addressList = document.querySelector('.address-list');
        if (!addressList) return; // Không có div thì không làm gì cả

        addressList.innerHTML = '';

        addresses.forEach((addr, index) => {
            const addressHtml = `
                <div class="address-option">
                    <input type="radio" name="selectedAddress" ${index === 0 ? 'checked' : ''} />
                    <div>
                        <strong>${addr.name}</strong> - ${addr.phone}
                        <div class="address-details">${addr.address}</div>
                        ${index === 0 ? '<span class="default-badge">Mặc định</span>' : ''}
                    </div>
                    ${index !== 0 ? `<button type="button" class="delete-btn" onclick="deleteAddress(${index})">
                        <i class="fas fa-trash"></i> Xóa
                    </button>` : ''}
                </div>
            `;
            addressList.innerHTML += addressHtml;
        });
    }


    // Hàm xóa địa chỉ
    function deleteAddress(index) {
        if (index === 0) {
            alert("Không thể xóa địa chỉ mặc định!");
            return;
        }

        if (confirm("Bạn có chắc chắn muốn xóa địa chỉ này không?")) {
            addresses.splice(index, 1);
            updateAddressList();
        }
    }

    /* Chọn địa chỉ
    async function selectAddress() {
        const selectedRadio = document.querySelector('input[name="selectedAddress"]:checked');

        if (!selectedRadio) {
            alert("Vui lòng chọn một địa chỉ!");
            return;
        }

        const addressOption = selectedRadio.parentElement;
        const nameElement = addressOption.querySelector("strong");
        const textContent = addressOption.textContent;
        const addressDetails = addressOption.querySelector(".address-details");

        if (!nameElement || !addressDetails) {
            alert("Không thể lấy thông tin địa chỉ.");
            return;
        }

        const name = nameElement.textContent;
        const phone = textContent.split('-')[1].trim().split('\n')[0];
        const address = addressDetails.textContent;

        try {
            // Cập nhật giao diện
            document.getElementById("currentAddress").innerHTML = `
                <strong>${name}</strong> ${phone}
                <span class="address-text">${address}</span>
                <span class="default-badge">Mặc định</span>
                <a class="change-link" onclick="showAddressList()">Thay đổi</a>
            `;

            hideAddressList();

        } catch (error) {
            console.error('Error:', error);
            alert("Có lỗi xảy ra khi cập nhật địa chỉ mặc định. Vui lòng thử lại.");
        }
    }
    */

    // Tải danh sách tỉnh/thành phố
    const apiBase = "https://provinces.open-api.vn/api";

    window.onload = function () {
        fetch(`${apiBase}/p/`)
            .then(res => res.json())
            .then(data => {
                const provinceSelect = document.getElementById("province");
                data.forEach(province => {
                    const option = document.createElement("option");
                    option.value = province.code;
                    option.textContent = province.name;
                    provinceSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading provinces:', error);
                alert("Không thể tải danh sách tỉnh thành. Vui lòng tải lại trang.");
            });
    };

    function loadDistricts() {
        const provinceCode = document.getElementById("province").value;
        const districtSelect = document.getElementById("district");
        const wardSelect = document.getElementById("ward");
        districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

        if (!provinceCode) return;

        fetch(`${apiBase}/p/${provinceCode}?depth=2`)
            .then(res => res.json())
            .then(data => {
                data.districts.forEach(district => {
                    const option = document.createElement("option");
                    option.value = district.code;
                    option.textContent = district.name;
                    districtSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading districts:', error);
                alert("Không thể tải danh sách quận huyện. Vui lòng thử lại.");
            });
    }

    function loadWards() {
        const districtCode = document.getElementById("district").value;
        const wardSelect = document.getElementById("ward");
        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

        if (!districtCode) return;

        fetch(`${apiBase}/d/${districtCode}?depth=2`)
            .then(res => res.json())
            .then(data => {
                data.wards.forEach(ward => {
                    const option = document.createElement("option");
                    option.value = ward.name;
                    option.textContent = ward.name;
                    wardSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading wards:', error);
                alert("Không thể tải danh sách phường xã. Vui lòng thử lại.");
            });
    }
        function setupOrderTabs() {
            const tabs = document.querySelectorAll('#orderTabs .order-tab');
            const cards = document.querySelectorAll('.order-card');
            const noOrdersMessage = document.getElementById('noOrdersMessage');

            function updateDisplay(status) {
                let hasOrder = false;
                const filterStatus = status.toLowerCase();

                cards.forEach(card => {
                    const cardStatus = card.getAttribute("data-status").toLowerCase();
                    const show = (filterStatus === 'all' || filterStatus === cardStatus);
                    card.style.display = show ? 'block' : 'none';
                    if (show) hasOrder = true;
                });

                if (noOrdersMessage) {
                    noOrdersMessage.style.display = hasOrder ? 'none' : 'block';
                }
            }

            tabs.forEach(tab => {
                tab.addEventListener('click', function (e) {
                    e.preventDefault();
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    updateDisplay(this.dataset.status);
                });
            });

            updateDisplay("all");
        }

        // Gọi khi trang khởi động và khi bấm sidebar
        document.addEventListener("DOMContentLoaded", function () {
            const hash = window.location.hash ? window.location.hash.substring(1) : "profile";
            if (hash === "orderManagement") {
                setupOrderTabs();
            }
        });

        window.addEventListener("load", function () {
            document.querySelectorAll('.sidebar-link').forEach(link => {
                link.addEventListener('click', function (e) {
                    const sectionId = this.getAttribute('href').substring(1);
                    if (sectionId === "orderManagement") {
                        setTimeout(setupOrderTabs, 0);
                    }
                });
            });
        });
        
</script>
