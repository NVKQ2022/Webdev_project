@model List<CartItem>


@{
    ViewBag.Title = "Trang thanh toán";
    decimal total = 0;
    var user = ViewBag.User as Webdev_project.Models.User;
    List<ReceiveInfo> receiveInfos= ViewBag.ReceiveInfos;
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-geosearch@3.11.0/dist/geosearch.css" />
    <style>
        body {
            background-color: #f5f5f5;
        }
        /* Container */
        .payment-container {
            background-color: white;
            max-width: 900px;
            margin: 20px auto;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

            .payment-container h2 {
                font-size: 20px;
                margin-bottom: 20px;
                color: #6f42c1;
            }

        /* Bảng sản phẩm */
        .payment-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .payment-table th,
            .payment-table td {
                padding: 12px;
                border-bottom: 1px solid #ddd;
                text-align: left;
            }

            .payment-table th {
                background-color: #fafafa;
                font-size: 14px;
                color: #555;
            }

            .payment-table td img {
                width: 80px;
                border-radius: 4px;
                border: 1px solid #eee;
            }

        /* Button */
        .btn-purple {
            background-color: #6f42c1;
            color: white;
            border: none;
            font-weight: 500;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

            .btn-purple:hover {
                background-color: #5a32a3;
                color: white;
            }

        /* Địa chỉ người dùng */
        .address-content {
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 10px;
        }

        .address-text {
            display: block;
            margin-top: 4px;
            color: #333;
        }

        .default-badge {
            display: inline-block;
            padding: 2px 6px;
            background-color: #ebe3f9;
            color: #6f42c1;
            font-size: 12px;
            border: 1px solid #6f42c1;
            border-radius: 3px;
            margin-left: 10px;
        }

        .change-link {
            float: right;
            color: #6f42c1;
            cursor: pointer;
            font-size: 13px;
            text-decoration: underline;
        }

        /* Danh sách địa chỉ người dùng */
        .address-list {
            margin-top: 12px;
            border-top: 1px solid #eee;
            padding-top: 12px;
        }

        .address-option {
            display: flex;
            gap: 8px;
            align-items: flex-start;
            margin-bottom: 12px;
        }

            .address-option input[type="radio"] {
                margin-top: 6px;
            }

        .address-details {
            font-size: 13px;
            color: #555;
        }

        /* Form */
        .new-address-form {
            margin-top: 10px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #f9f9f9;
        }

        .form-field {
            margin-bottom: 10px;
        }

        .input-field {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 6px;
            width: 100%;
            box-sizing: border-box;
        }

        /* Button */
        .add-address-btn {
            background: none;
            border: 1px dashed #c2bde5;
            padding: 8px;
            font-size: 14px;
            width: 100%;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
            color: #6f42c1;
        }

        .button-group {
            text-align: right;
            margin-top: 12px;
        }

        .btn-cancel,
        .btn-confirm {
            padding: 6px 14px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            margin-left: 8px;
        }

        .btn-cancel {
            background-color: #eee;
            color: #333;
        }

        .btn-confirm {
            background-color: #6f42c1;
            color: white;
        }

        /* Ẩn/Hiện */
        .hidden {
            display: none;
        }

        .payment-option {
            padding: 10px 15px;
            border: 1px solid #ddd;
            background-color: #f9f9f9;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

            .payment-option.active {
                border-color: #6f42c1;
                background-color: #fff0ea;
                color: #6f42c1;
                font-weight: bold;
            }

        #map {
            width: 100%;
            height: 300px;
            border-radius: 8px;
            margin: 15px 0;
            border: 1px solid #ddd;
            z-index: 1;
        }

        /* Fix cho leaflet controls */
        .leaflet-top,
        .leaflet-bottom {
            z-index: 400 !important;
        }

        .payment-methods {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 15px 0;
        }

        .payment-summary {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .total-amount-wrapper {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            margin-bottom: 15px;
        }

        .total-amount-label {
            font-size: 14px;
            color: #666;
            margin-right: 15px;
        }

        .total-amount {
            font-size: 24px;
            font-weight: bold;
            color: #6f42c1;
        }

        .btn-wrapper {
            display: flex;
            justify-content: flex-end;
        }

        .btn-purple {
            min-width: 200px;
        }
    </style>
</head>

<!-- Phần địa chỉ -->
<div class="payment-container">
    <h5><b>Địa chỉ nhận hàng</b></h5>

    <div class="address-content" id="currentAddress">
        @if (receiveInfos != null && receiveInfos.Any())
        {
            var defaultAddress = receiveInfos.First();
            <strong>@defaultAddress.Name</strong> @defaultAddress.Phone
            <span class="address-text">@defaultAddress.Address</span>
            <span class="default-badge">Mặc định</span>
            <a class="change-link" onclick="showAddressList()">Thay đổi</a>
        }
        else
        {
            <p>Chưa có địa chỉ nhận hàng. Vui lòng thêm địa chỉ mới.</p>
            <a class="change-link" onclick="showAddressList()">Thêm địa chỉ</a>
        }
    </div>

    <!-- Danh sách địa chỉ -->
    <div class="address-list hidden" id="addressList">
         <h4 class="mb-4">Sổ địa chỉ</h4>
                    
                    <!-- Existing Addresses -->
                    <div class="address-list mb-4">
                        @foreach (var address in receiveInfos)
                        {
                            <label class="address-option">
                                <input type="radio" name="selectedAddress" @(address == receiveInfos.First() ? "checked" : "") />
                                <div>
                                    <strong>@address.Name</strong> - @address.Phone
                                    <div class="address-details">@address.Address</div>
                                    @if(address == receiveInfos.First())
                                    {
                                        <span class="default-badge">Mặc định</span>
                                    }
                                </div>
                            </label>
                        }
                    </div>

        <div id="additionalAddresses"></div>

        <button class="add-address-btn" onclick="showAddForm()">+ Thêm địa chỉ mới</button>

        <!-- Thêm địa chỉ mới -->
        <div class="new-address-form hidden" id="newAddressForm">
            <div class="form-field">
                <input type="text" id="fullName" placeholder="Họ và tên" class="input-field" />
            </div>
            <div class="form-field">
                <input type="text" id="phone" placeholder="Số điện thoại" class="input-field" />
            </div>
            <div class="form-field">
                <select id="province" class="input-field" onchange="loadDistricts()">
                    <option value="">Chọn Tỉnh/Thành phố</option>
                </select>
            </div>
            <div class="form-field">
                <select id="district" class="input-field" onchange="loadWards()">
                    <option value="">Chọn Quận/Huyện</option>
                </select>
            </div>
            <div class="form-field">
                <select id="ward" class="input-field">
                    <option value="">Chọn Phường/Xã</option>
                </select>
            </div>
            <div class="form-field">
                <input type="text" id="details" placeholder="Địa chỉ cụ thể (số nhà, tên đường...)" class="input-field" />
            </div>
            <div class="button-group">
                <button class="btn-cancel" onclick="hideAddForm()">Trở lại</button>
                <button class="btn-confirm" onclick="addAddress()">Thêm</button>
            </div>
        </div>

        <div class="button-group">
            <button class="btn-cancel" onclick="hideAddressList()">Hủy</button>
            <button class="btn-confirm" onclick="selectAddress()">Xác nhận</button>
        </div>
    </div>
</div>

<!-- Thông tin đơn hàng -->
<div class="payment-container">
    <h5><b>Thông tin đơn hàng</b></h5>
    <table class="payment-table">
        <thead>
            <tr>
                <th>Hình ảnh</th>
                <th>Sản phẩm</th>
                <th>Số lượng</th>
                <th>Đơn giá</th>
                <th>Thành tiền</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                total += item.UnitPrice * item.Quantity;
                <tr data-product-id="@item.ProductId">
                    <td><img src="@item.Image" alt="Ảnh sản phẩm" /></td>
                    <td>@item.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@String.Format("{0:N0}đ", item.UnitPrice)</td>
                    <td>@String.Format("{0:N0}đ", item.UnitPrice * item.Quantity)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Thông tin đặt hàng -->
@using (Html.BeginForm("PaymentResult", "Payment", FormMethod.Post, new { id = "paymentForm" }))
{
    <div class="payment-container">
        <div class="row">
            <!-- Cột trái - Bản đồ -->
            <div class="col-md-4">
                <h5><b>Vị trí giao hàng</b></h5>
                <div id="map"></div>
            </div>

            <!-- Cột phải - Phương thức thanh toán -->
            <div class="col-md-8">
                <h5><b>Phương thức thanh toán</b></h5>
                <input type="hidden" id="paymentMethod" name="paymentMethod" value="Cash" />
                <div class="payment-methods">
                    <button type="button" class="payment-option" onclick="selectPaymentMethod(this, 'Card')">Thẻ Tín dụng/Ghi nợ</button>
                    <button type="button" class="payment-option active" onclick="selectPaymentMethod(this, 'Cash')">Thanh toán khi nhận hàng</button>
                </div>

                <!-- Tổng tiền và nút đặt hàng -->
                <div class="payment-summary">
                    <div class="total-amount-wrapper">
                        <div class="total-amount-label">Tổng thanh toán:</div>
                        <div class="total-amount">@String.Format("{0:N0}đ", ViewBag.TotalAmount)</div>
                    </div>
                    <div class="btn-wrapper">
                        <button type="submit" class="btn-purple">Đặt hàng</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Thêm thư viện Leaflet và Geosearch -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>
<script src="https://unpkg.com/leaflet-geosearch@3.11.0/dist/bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let map;
        let marker;
        const provider = new GeoSearch.OpenStreetMapProvider();

        // Xử lý form submit
        document.getElementById('paymentForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Lấy thông tin địa chỉ
            const addressElement = document.querySelector('.address-text');
            const nameElement = document.querySelector('#currentAddress strong');
            const phoneElement = document.querySelector('#currentAddress').textContent.match(/(\d+)/g);

            if (!addressElement || !nameElement || !phoneElement) {
                alert('Vui lòng chọn địa chỉ nhận hàng');
                return;
            }

            // Lấy thông tin sản phẩm
            const cartItems = [];
            document.querySelectorAll('.payment-table tbody tr').forEach(row => {
                const item = {
                    ProductID: row.getAttribute('data-product-id'),
                    ProductName: row.cells[1].textContent.trim(),
                    Image: row.cells[0].querySelector('img').src,
                    Quantity: parseInt(row.cells[2].textContent),
                    UnitPrice: parseInt(row.cells[3].textContent.replace(/[^\d]/g, ''))
                };
                cartItems.push(item);
            });

            // Tạo object chứa toàn bộ thông tin đơn hàng
            const orderData = {
                UserID: @(ViewBag.User?.Id ?? 0),
                Items: cartItems,
                TotalAmount: @ViewBag.TotalAmount,
                PaymentMethod: document.getElementById('paymentMethod').value,
                Status: "Pending",
                CreatedAt: new Date().toISOString(), // ✅ ISO string, safe for C#
                ReceiveInfo: {
                    Name: nameElement.textContent.trim(),
                    Phone: document.getElementById('phone').value.trim(),  // ✅ make sure this element exists
                    Address: addressElement.textContent.trim()
                }
            };

            try {
                const response = await fetch('/Payment/ProcessOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(orderData)
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = result.redirectUrl;
                    } else {
                        alert('Có lỗi xảy ra khi xử lý đơn hàng');
                    }
                } else {
                    const error = await response.json();
                    alert(error.message || 'Có lỗi xảy ra khi xử lý đơn hàng');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi gửi đơn hàng');
            }
        });

        async function initMap() {
            try {
                // Khởi tạo bản đồ với vị trí mặc định trước
                const defaultLocation = [10.8231, 106.6297]; // TP.HCM
                map = L.map('map', {
                    center: defaultLocation,
                    zoom: 15,
                    scrollWheelZoom: false
                });

                // Thêm layer OpenStreetMap
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Thêm marker
                marker = L.marker(defaultLocation).addTo(map);

                // Fix cho vấn đề render và cập nhật vị trí ban đầu
                setTimeout(async () => {
                    map.invalidateSize();
                    
                    // Lấy địa chỉ hiện tại
                    const addressElement = document.querySelector('.address-text');
                    if (addressElement) {
                        const address = addressElement.textContent + ', Vietnam';
                        console.log('Địa chỉ ban đầu:', address);
                        
                        const results = await provider.search({ query: address });
                        if (results.length > 0) {
                            const { x: lng, y: lat } = results[0];
                            console.log('Tọa độ ban đầu:', lat, lng);
                            map.setView([lat, lng], 15);
                            marker.setLatLng([lat, lng]);
                            marker.bindPopup(addressElement.textContent).openPopup();
                        }
                    }
                }, 100);

            } catch (error) {
                console.error('Lỗi khởi tạo bản đồ:', error);
            }
        }

        // Hàm cập nhật vị trí trên bản đồ
        async function updateMapFromAddress(address) {
            if (!address) {
                const addressElement = document.querySelector('.address-text');
                if (!addressElement) return;
                address = addressElement.textContent;
            }

            // Thêm ', Vietnam' nếu chưa có
            if (!address.toLowerCase().includes('vietnam')) {
                address += ', Vietnam';
            }

            console.log('Đang cập nhật địa chỉ:', address);

            try {
                const results = await provider.search({ query: address });
                console.log('Kết quả tìm kiếm:', results);
                
                if (results.length > 0) {
                    const { x: lng, y: lat } = results[0];
                    console.log('Tọa độ mới:', lat, lng);
                    
                    // Sử dụng flyTo để có animation
                    map.flyTo([lat, lng], 15, {
                        duration: 1.5
                    });
                    marker.setLatLng([lat, lng]);
                    marker.bindPopup(address.replace(', Vietnam', '')).openPopup();
                }
            } catch (error) {
                console.error('Không thể tìm thấy địa chỉ:', error);
            }
        }

        // Chọn và cập nhật địa chỉ mới
        async function selectAddress() {
            const selectedRadio = document.querySelector('input[name="selectedAddress"]:checked');
            if (!selectedRadio) {
                alert("Vui lòng chọn một địa chỉ!");
                return;
            }

            // Lấy thông tin địa chỉ
            const addressOption = selectedRadio.parentElement;
            const nameElement = addressOption.querySelector("strong");
            const addressDetails = addressOption.querySelector(".address-details");

            if (!nameElement || !addressDetails) {
                alert("Không thể lấy thông tin địa chỉ.");
                return;
            }

            const name = nameElement.textContent;
            const phone = addressOption.textContent.split('-')[1].trim().split('\n')[0];
            const address = addressDetails.textContent;

            // Cập nhật hiển thị
            document.getElementById("currentAddress").innerHTML = `
                <strong>${name}</strong> (${phone})
                <span class="address-text">${address}</span>
                <a class="change-link" onclick="showAddressList()">Thay đổi</a>
            `;

            // Cập nhật vị trí trên bản đồ với địa chỉ mới
            await updateMapFromAddress(address);
            hideAddressList();
        }

        // Gán các hàm vào window để có thể gọi từ onclick
        window.selectAddress = selectAddress;
        window.updateMapFromAddress = updateMapFromAddress;

        // Khởi tạo bản đồ
        initMap();
    });

    // Ẩn/Hiện danh sách địa chỉ người nhận
    function showAddressList() {
        document.getElementById("addressList").classList.remove("hidden");
    }

    function hideAddressList() {
        document.getElementById("addressList").classList.add("hidden");
    }

	// Ẩn/hiện form thêm địa chỉ mới
    function showAddForm() {
        document.getElementById("newAddressForm").classList.remove("hidden");
        document.querySelector(".add-address-btn").classList.add("hidden");
    }

    function hideAddForm() {
        document.getElementById("newAddressForm").classList.add("hidden");
        document.querySelector(".add-address-btn").classList.remove("hidden");
        clearForm();
    }

    // Clear Form
    function clearForm() {
        const elements = ['fullName', 'phone', 'addressLine', 'details'];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.value = '';
            }
        });
        
        // Reset select elements if they exist
        const selects = ['province', 'district', 'ward'];
        selects.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.selectedIndex = 0;
            }
        });
    }

    // Số điện thoại đúng chuẩn
    function isValidPhone(phone) {
        return /^\d{10}$/.test(phone);
    }

    // Thêm địa chỉ
    async function addAddress() {
        const name = document.getElementById("fullName").value.trim();
        const phone = document.getElementById("phone").value.trim();
        const province = document.getElementById("province").options[document.getElementById("province").selectedIndex].text;
        const district = document.getElementById("district").options[document.getElementById("district").selectedIndex].text;
        const ward = document.getElementById("ward").value;
        const details = document.getElementById("details").value.trim();

        if (!name || !phone || !province || !district || !ward || !details) {
            alert("Vui lòng nhập đầy đủ thông tin địa chỉ.");
            return;
        }
		if (!isValidPhone(phone)) {
			alert("Số điện thoại không hợp lệ. Vui lòng nhập lại.");
			return;
		}
        const fullAddress = `${details}, ${ward}, ${district}, ${province}`;

        try {
            const response = await fetch('/Authenticate/AddAddress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `name=${encodeURIComponent(name)}&phone=${encodeURIComponent(phone)}&address=${encodeURIComponent(fullAddress)}`
            });

            const result = await response.json();
            console.log('Response:', result);

            if (result.success) {
                // Thêm địa chỉ mới vào danh sách hiển thị
                const newAddressHTML = `
                    <label class="address-option">
                        <input type="radio" name="selectedAddress" checked />
                        <div>
                            <strong>${name}</strong> - ${phone}
                            <div class="address-details">${fullAddress}</div>
                        </div>
                    </label>
                `;
                document.getElementById("additionalAddresses").insertAdjacentHTML('beforeend', newAddressHTML);
                
                // Cập nhật địa chỉ hiện tại
                document.getElementById("currentAddress").innerHTML = `
                    <strong>${name}</strong> ${phone}
                    <span class="address-text">${fullAddress}</span>
                    <a class="change-link" onclick="showAddressList()">Thay đổi</a>
                `;

                // Cập nhật vị trí trên bản đồ
                await updateMapFromAddress(fullAddress);
                
                hideAddForm();
                hideAddressList();
                alert('Thêm địa chỉ thành công!');
            } else {
                throw new Error(result.message || 'Không thể thêm địa chỉ');
            }
        } catch (error) {
            console.error('Error:', error);
            alert("Có lỗi xảy ra khi thêm địa chỉ. Vui lòng thử lại.");
        }
    }

	// Tải danh sách tỉnh/thành phố
    const apiBase = "https://provinces.open-api.vn/api";

    window.onload = function () {
        fetch(`${apiBase}/p/`)
            .then(res => res.json())
            .then(data => {
                const provinceSelect = document.getElementById("province");
                data.forEach(province => {
                    const option = document.createElement("option");
                    option.value = province.code;
                    option.textContent = province.name;
                    provinceSelect.appendChild(option);
                });
            });
    };

    function loadDistricts() {
        const provinceCode = document.getElementById("province").value;
        const districtSelect = document.getElementById("district");
        const wardSelect = document.getElementById("ward");
        districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

        if (!provinceCode) return;

        fetch(`${apiBase}/p/${provinceCode}?depth=2`)
            .then(res => res.json())
            .then(data => {
                data.districts.forEach(district => {
                    const option = document.createElement("option");
                    option.value = district.code;
                    option.textContent = district.name;
                    districtSelect.appendChild(option);
                });
            });
    }

    function loadWards() {
        const districtCode = document.getElementById("district").value;
        const wardSelect = document.getElementById("ward");
        wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';

        if (!districtCode) return;

        fetch(`${apiBase}/d/${districtCode}?depth=2`)
            .then(res => res.json())
            .then(data => {
                data.wards.forEach(ward => {
                    const option = document.createElement("option");
                    option.value = ward.name;
                    option.textContent = ward.name;
                    wardSelect.appendChild(option);
                });
            });
    }

	// Chọn phương thức thanh toán
    function selectPaymentMethod(button, method) {
        document.querySelectorAll(".payment-option").forEach(btn => btn.classList.remove("active"));
        button.classList.add("active");
        document.getElementById("paymentMethod").value = method;
    }

</script>

<!-- 
    Leaflet: Thư viện bản đồ chính
    Geosearch: Plugin để tìm kiếm địa chỉ và chuyển thành tọa độ
    Sử dụng CDN để load nhanh và cache tốt
-->
